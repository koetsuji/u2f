@using MonoSign.U2F
@model RegisterDeviceModel
@{
    ViewData["Title"] = App.CurrentUser.UserName;
}
<div class="card shadow-sm">
    <div class="card-header">
        <div class="d-flex justify-content-between">
            <h4 class="my-0 font-weight-normal text-danger">
                <i class="fa fa-user"></i> @App.CurrentUser.UserName
            </h4>
            <div>
                <a href="#" id="signin_device" class="btn btn-outline-success"><i class="fa fa-lock"></i> Authenticate</a>
                <a href="#" id="register_device" class="btn btn-primary"><i class="fa fa-save"></i> Register Device</a>
            </div>
        </div>
    </div>
    <div class="card-body">
        <table class="table table-hover">
            <thead>
            <tr>
                <th>#</th>
                <th>Name</th>
                <th>Usage</th>
                <th>Key Handle</th>
                <th>Public Key</th>
                <th>Certificate</th>
            </tr>
            </thead>
            <tbody>
            @if (App.CurrentUser.Devices.Any())
            {
                foreach (var registration in App.CurrentUser.Devices)
                {
                    var device = FidoDeviceRegistration.FromJson(registration.Data);
                    <tr>
                        <td>
                            <a href="#" data-js="remove-device" data-id="@registration.Identifier">
                                <i class="fa fa-trash-alt"></i>
                            </a>
                        </td>
                        <td>@registration.Name</td>
                        <td>@registration.Usage</td>
                        <td>@device.KeyHandle.ToString().Substring(0, 12)..</td>
                        <td>@device.PublicKey.ToString().Substring(0, 12)...</td>
                        <td>@device.Certificate.ToString().Substring(0, 40)...</td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="5">There is no device</td>
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>
<div class="modal" tabindex="-1" role="dialog" id="register_modal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"><i class="fa fa-key"></i> Waiting to tap</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="form-group p-2">
                <label for="device_name">Device Name</label>
                <input type="text" class="form-control" id="device_name" placeholder="Name your device">
            </div>
            <ul class="list-group list-group-flush">
                <li class="list-group-item">1. Name your device</li>
                <li class="list-group-item">2. Insert your device</li>
                <li class="list-group-item">3. If your device already inserted, your device led must be blinking.</li>
                <li class="list-group-item">4. Tap to key on your device.</li>
                <li class="list-group-item text-center"> <i class="fa fa-sync fa-spin"></i> Waiting...</li>
            </ul>
        </div>
    </div>
</div>

@section Scripts
{
    <script type="text/javascript">
        // We will keep this state for closed modal if someone close it before register and then tap the key.
        var waitingResponse = false;
        $("#register_device").on("click",
            function(event) {
                event.preventDefault();
                $.ajax({
                    url: 'RegisterDeviceRequest',
                    method: 'POST',
                    success: function(result) {

                        if (!result || result.error) {
                            showMessage(result.error, 3);
                            return;
                        }

                        var request = { "challenge": result.challenge, "version": "U2F_V2", "appId": result.appId };
                        var registeredKeys = [];

                        if (result.registeredKeys) {
                            $.each(result.registeredKeys,
                                function() {
                                    registeredKeys.push({ keyHandle: this, version: "U2F_V2" });
                                });
                        }

                        $("#device_name").val('');
                        waitingResponse = true;
                        try {
                            u2f.register(result.appId,
                                [request],
                                registeredKeys,
                                function(data) {
                                    if (!waitingResponse)
                                        return;

                                    waitingResponse = false;
                                    console.log("Register callback", data);
                                    if (data.errorCode) {
                                        onError(data.errorCode, true);
                                        $("#register_modal").modal("hide");
                                    } else {
                                        var json = JSON.stringify(data);

                                        var req = {
                                            appId: result.appId,
                                            challenge: result.challenge,
                                            rawRegisterResponse: json,
                                            deviceName: $("#device_name").val()
                                        };

                                        $.ajax({
                                            url: 'RegisterDevice',
                                            method: 'POST',
                                            data: req,
                                            json: true,
                                            success: function(result) {
                                                checkResult(result);
                                            },
                                            error : function(result) {
                                                if (result.responseJSON) {
                                                    checkResult(result.responseJSON);
                                                }
                                            },
                                            complete: function() {
                                                $("#register_modal").modal("hide");
                                            }
                                        });
                                    }
                                });

                            $("#register_modal").modal();
                        } catch (e) {
                            console.error(e);
                            waitingResponse = false;
                        }
                    }
                });
            });

        $('#register_modal').on('hidden.bs.modal',
            function(e) {
                waitingResponse = false;
            });

        $("[data-js='remove-device']").on("click",
            function(event) {
                event.preventDefault();
                var identifier = $(this).data("id");

                $.ajax({
                    url: 'RemoveDevice',
                    method: 'POST',
                    data: {
                        identifier
                    },
                    json: true,
                    success: function(result) {
                        checkResult(result);
                    },
                    complete: function() {
                        $("#register_modal").modal("hide");
                    }
                });
            });

        function checkResult(result) {
            if (!result) {
                showMessage("No return value from server.", 3);
                return false;
            }
            if (result.error) {
                showMessage(result.error, 3);
                return false;
            }

            if (result.message) {
                showMessage(result.message, 1);
            }

            if (result.redirect) {
                // Waiting for 1 sec to show success message then redirect.
                setTimeout(function() {
                        location.href = result.redirect;
                    },
                    1000);
            }

            return true;
        }

        function onError(code, enrolling) {
            switch (code) {
            case u2f.ErrorCodes.OTHER_ERROR:
                showMessage('sign error (other)', 2);
                break;
            case u2f.ErrorCodes.BAD_REQUEST:
                showMessage('bad request', 2);
                break;
            case u2f.ErrorCodes.CONFIGURATION_UNSUPPORTED:
                showMessage('configuration unsupported', 3);
                break;
            case u2f.ErrorCodes.DEVICE_INELIGIBLE:
                if (enrolling)
                    showMessage('U2F token is already registered', 2);
                else
                    showMessage('U2F token is not registered', 3);
                break;
            case u2f.ErrorCodes.TIMEOUT:
                showMessage('timeout', 2);
                break;
            default:
                showMessage('unknown error code=' + code, 3);
                break;
            }
        }

        function showMessage(message, type) {
            var cssClass = 'alert-info';
            if (type === 1) {
                cssClass = "alert-success";
            } else if (type === 2) {
                cssClass = "alert-warning";
            } else if (type === 3) {
                cssClass = "alert-danger";
            }
            var element = $("<div class='alert " + cssClass + "'></div>");
            element.append($('<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>'));
            element.append(message);
            $("#messages").append(element);
        }
    </script>
}